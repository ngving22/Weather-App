{"ast":null,"code":"import _classCallCheck from \"/Users/andrewng/Desktop/react-app/react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrewng/Desktop/react-app/react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nvar now = function now() {\n  return Date.now();\n},\n    defaultZone = \"system\",\n    defaultLocale = null,\n    defaultNumberingSystem = null,\n    defaultOutputCalendar = null,\n    throwOnInvalid;\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\n\n\nvar Settings = /*#__PURE__*/function () {\n  function Settings() {\n    _classCallCheck(this, Settings);\n  }\n\n  _createClass(Settings, null, [{\n    key: \"now\",\n    get:\n    /**\n     * Get the callback for returning the current timestamp.\n     * @type {function}\n     */\n    function get() {\n      return now;\n    }\n    /**\n     * Set the callback for returning the current timestamp.\n     * The function should return a number, which will be interpreted as an Epoch millisecond count\n     * @type {function}\n     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n     */\n    ,\n    set: function set(n) {\n      now = n;\n    }\n    /**\n     * Set the default time zone to create DateTimes in. Does not affect existing instances.\n     * Use the value \"system\" to reset this value to the system's time zone.\n     * @type {string}\n     */\n\n  }, {\n    key: \"defaultZone\",\n    get:\n    /**\n     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n     * The default value is the system's time zone (the one set on the machine that runs this code).\n     * @type {Zone}\n     */\n    function get() {\n      return normalizeZone(defaultZone, SystemZone.instance);\n    }\n    /**\n     * Get the default locale to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n    ,\n    set: function set(zone) {\n      defaultZone = zone;\n    }\n  }, {\n    key: \"defaultLocale\",\n    get: function get() {\n      return defaultLocale;\n    }\n    /**\n     * Set the default locale to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n    ,\n    set: function set(locale) {\n      defaultLocale = locale;\n    }\n    /**\n     * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n\n  }, {\n    key: \"defaultNumberingSystem\",\n    get: function get() {\n      return defaultNumberingSystem;\n    }\n    /**\n     * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n    ,\n    set: function set(numberingSystem) {\n      defaultNumberingSystem = numberingSystem;\n    }\n    /**\n     * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n\n  }, {\n    key: \"defaultOutputCalendar\",\n    get: function get() {\n      return defaultOutputCalendar;\n    }\n    /**\n     * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n    ,\n    set: function set(outputCalendar) {\n      defaultOutputCalendar = outputCalendar;\n    }\n    /**\n     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"throwOnInvalid\",\n    get: function get() {\n      return throwOnInvalid;\n    }\n    /**\n     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n     * @type {boolean}\n     */\n    ,\n    set: function set(t) {\n      throwOnInvalid = t;\n    }\n    /**\n     * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n     * @return {void}\n     */\n\n  }, {\n    key: \"resetCaches\",\n    value: function resetCaches() {\n      Locale.resetCache();\n      IANAZone.resetCache();\n    }\n  }]);\n\n  return Settings;\n}();\n\nexport { Settings as default };","map":{"version":3,"names":["SystemZone","IANAZone","Locale","normalizeZone","now","Date","defaultZone","defaultLocale","defaultNumberingSystem","defaultOutputCalendar","throwOnInvalid","Settings","n","instance","zone","locale","numberingSystem","outputCalendar","t","resetCache"],"sources":["/Users/andrewng/Desktop/react-app/react-app/node_modules/luxon/src/settings.js"],"sourcesContent":["import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}\n"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,SAASC,aAAT,QAA8B,oBAA9B;;AAEA,IAAIC,GAAG,GAAG;EAAA,OAAMC,IAAI,CAACD,GAAL,EAAN;AAAA,CAAV;AAAA,IACEE,WAAW,GAAG,QADhB;AAAA,IAEEC,aAAa,GAAG,IAFlB;AAAA,IAGEC,sBAAsB,GAAG,IAH3B;AAAA,IAIEC,qBAAqB,GAAG,IAJ1B;AAAA,IAKEC,cALF;AAOA;AACA;AACA;;;IACqBC,Q;;;;;;;;IACnB;AACF;AACA;AACA;IACE,eAAiB;MACf,OAAOP,GAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;SACE,aAAeQ,CAAf,EAAkB;MAChBR,GAAG,GAAGQ,CAAN;IACD;IAED;AACF;AACA;AACA;AACA;;;;;IAKE;AACF;AACA;AACA;AACA;IACE,eAAyB;MACvB,OAAOT,aAAa,CAACG,WAAD,EAAcN,UAAU,CAACa,QAAzB,CAApB;IACD;IAED;AACF;AACA;AACA;;SAhBE,aAAuBC,IAAvB,EAA6B;MAC3BR,WAAW,GAAGQ,IAAd;IACD;;;SAeD,eAA2B;MACzB,OAAOP,aAAP;IACD;IAED;AACF;AACA;AACA;;SACE,aAAyBQ,MAAzB,EAAiC;MAC/BR,aAAa,GAAGQ,MAAhB;IACD;IAED;AACF;AACA;AACA;;;;SACE,eAAoC;MAClC,OAAOP,sBAAP;IACD;IAED;AACF;AACA;AACA;;SACE,aAAkCQ,eAAlC,EAAmD;MACjDR,sBAAsB,GAAGQ,eAAzB;IACD;IAED;AACF;AACA;AACA;;;;SACE,eAAmC;MACjC,OAAOP,qBAAP;IACD;IAED;AACF;AACA;AACA;;SACE,aAAiCQ,cAAjC,EAAiD;MAC/CR,qBAAqB,GAAGQ,cAAxB;IACD;IAED;AACF;AACA;AACA;;;;SACE,eAA4B;MAC1B,OAAOP,cAAP;IACD;IAED;AACF;AACA;AACA;;SACE,aAA0BQ,CAA1B,EAA6B;MAC3BR,cAAc,GAAGQ,CAAjB;IACD;IAED;AACF;AACA;AACA;;;;WACE,uBAAqB;MACnBhB,MAAM,CAACiB,UAAP;MACAlB,QAAQ,CAACkB,UAAT;IACD;;;;;;SA7GkBR,Q"},"metadata":{},"sourceType":"module"}