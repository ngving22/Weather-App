{"ast":null,"code":"const API_KEY = '51b402f0ef8809ca59b9787b60abd7e6';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + '/' + infoType);\n  url.search = new URLSearchParams({ ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\n\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      long\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    long,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\n\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, 'ccc'),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, 'hh:mm a'),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\n\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  const formattedForecastWeather = await getWeatherData('onecall', {\n    lat,\n    lon,\n    exlude: 'current, minutely, alerts',\n    units: searchParams.units\n  }).then(formatForecastWeather);\n  return { ...formatCurrentWeather,\n    ...formatForecastWeather\n  };\n};\n\nconst formatToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n};\n\nexport default getFormattedWeatherData;","map":{"version":3,"names":["API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","long","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","d","title","formatToLocalTime","day","getFormattedWeatherData","formattedCurrentWeather","lon","formattedForecastWeather","exlude","units","secs","zone","format","DateTime","fromSeconds","setZone","toFormat"],"sources":["/Users/andrewng/Desktop/react-app/react-app/src/Services/weatherService.js"],"sourcesContent":["const API_KEY='51b402f0ef8809ca59b9787b60abd7e6';\nconst BASE_URL='https://api.openweathermap.org/data/2.5'\n\n\nconst getWeatherData =(infoType, searchParams) => {\n    const url = new URL(BASE_URL + '/' + infoType)\n    url.search = new URLSearchParams({...searchParams, appid:API_KEY})\n\n\n    return fetch(url).then((res) => res.json())\n}\n\nconst formatCurrentWeather = (data) => {\n    const {\n        coord: {lat, long},\n        main: {temp, feels_like, temp_min, temp_max, humidity},\n        name,\n        dt,\n        sys: {country, sunrise, sunset},\n        weather,\n        wind: {speed}\n    } = data\n\n    const {main: details, icon} = weather[0]\n\n    return {lat, long, temp, feels_like, temp_min, temp_max,\n    humidity, name, dt, country, sunrise, sunset, details, icon, speed}\n}\n\nconst formatForecastWeather =(data) => {\n    let {timezone, daily, hourly} = data;\n    daily = daily.slice(1,6).map(d => {\n        return {\n            title :formatToLocalTime(d.dt, timezone, 'ccc'),\n            temp: d.temp.day,\n            icon: d.weather[0].icon\n        }\n    })\n\n    hourly = hourly.slice(1,6).map(d => {\n        return {\n            title :formatToLocalTime(d.dt, timezone, 'hh:mm a'),\n            temp: d.temp.day,\n            icon: d.weather[0].icon\n        }\n    })\n\n    return {timezone, daily, hourly};\n\n}\n\nconst getFormattedWeatherData = async (searchParams) => {\n    const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather)\n\n    const {lat, lon}=formattedCurrentWeather\n    const formattedForecastWeather = await getWeatherData('onecall', {\n        lat, lon, exlude: 'current, minutely, alerts', units: searchParams.units\n    }).then(formatForecastWeather)\n\n    return {...formatCurrentWeather, ...formatForecastWeather}\n}\n\nconst formatToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format)\n\nexport default getFormattedWeatherData"],"mappings":"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"},"metadata":{},"sourceType":"module"}