{"ast":null,"code":"import _classCallCheck from \"/Users/andrewng/Desktop/react-app/react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrewng/Desktop/react-app/react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ZoneIsAbstractError } from \"./errors.js\";\n/**\n * @interface\n */\n\nvar Zone = /*#__PURE__*/function () {\n  function Zone() {\n    _classCallCheck(this, Zone);\n  }\n\n  _createClass(Zone, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of zone\n     * @abstract\n     * @type {string}\n     */\n    function get() {\n      throw new ZoneIsAbstractError();\n    }\n    /**\n     * The name of this zone.\n     * @abstract\n     * @type {string}\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n  }, {\n    key: \"ianaName\",\n    get: function get() {\n      return this.name;\n    }\n    /**\n     * Returns whether the offset is known to be fixed for the whole year.\n     * @abstract\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n    /**\n     * Returns the offset's common name (such as EST) at the specified timestamp\n     * @abstract\n     * @param {number} ts - Epoch milliseconds for which to get the name\n     * @param {Object} opts - Options to affect the format\n     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n     * @param {string} opts.locale - What locale to return the offset name in.\n     * @return {string}\n     */\n\n  }, {\n    key: \"offsetName\",\n    value: function offsetName(ts, opts) {\n      throw new ZoneIsAbstractError();\n    }\n    /**\n     * Returns the offset's value as a string\n     * @abstract\n     * @param {number} ts - Epoch milliseconds for which to get the offset\n     * @param {string} format - What style of offset to return.\n     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n     * @return {string}\n     */\n\n  }, {\n    key: \"formatOffset\",\n    value: function formatOffset(ts, format) {\n      throw new ZoneIsAbstractError();\n    }\n    /**\n     * Return the offset in minutes for this zone at the specified timestamp.\n     * @abstract\n     * @param {number} ts - Epoch milliseconds for which to compute the offset\n     * @return {number}\n     */\n\n  }, {\n    key: \"offset\",\n    value: function offset(ts) {\n      throw new ZoneIsAbstractError();\n    }\n    /**\n     * Return whether this Zone is equal to another zone\n     * @abstract\n     * @param {Zone} otherZone - the zone to compare\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(otherZone) {\n      throw new ZoneIsAbstractError();\n    }\n    /**\n     * Return whether this Zone is valid.\n     * @abstract\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n  }]);\n\n  return Zone;\n}();\n\nexport { Zone as default };","map":{"version":3,"names":["ZoneIsAbstractError","Zone","name","ts","opts","format","otherZone"],"sources":["/Users/andrewng/Desktop/react-app/react-app/node_modules/luxon/src/zone.js"],"sourcesContent":["import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  get ianaName() {\n    return this.name;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,aAApC;AAEA;AACA;AACA;;IACqBC,I;;;;;;;;IACnB;AACF;AACA;AACA;AACA;IACE,eAAW;MACT,MAAM,IAAID,mBAAJ,EAAN;IACD;IAED;AACF;AACA;AACA;AACA;;;;SACE,eAAW;MACT,MAAM,IAAIA,mBAAJ,EAAN;IACD;;;SAED,eAAe;MACb,OAAO,KAAKE,IAAZ;IACD;IAED;AACF;AACA;AACA;AACA;;;;SACE,eAAkB;MAChB,MAAM,IAAIF,mBAAJ,EAAN;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,oBAAWG,EAAX,EAAeC,IAAf,EAAqB;MACnB,MAAM,IAAIJ,mBAAJ,EAAN;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,sBAAaG,EAAb,EAAiBE,MAAjB,EAAyB;MACvB,MAAM,IAAIL,mBAAJ,EAAN;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,gBAAOG,EAAP,EAAW;MACT,MAAM,IAAIH,mBAAJ,EAAN;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,gBAAOM,SAAP,EAAkB;MAChB,MAAM,IAAIN,mBAAJ,EAAN;IACD;IAED;AACF;AACA;AACA;AACA;;;;SACE,eAAc;MACZ,MAAM,IAAIA,mBAAJ,EAAN;IACD;;;;;;SApFkBC,I"},"metadata":{},"sourceType":"module"}