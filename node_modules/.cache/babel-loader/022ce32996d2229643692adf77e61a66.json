{"ast":null,"code":"import _classCallCheck from \"/Users/andrewng/Desktop/react-app/react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrewng/Desktop/react-app/react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/andrewng/Desktop/react-app/react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/andrewng/Desktop/react-app/react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { formatOffset as _formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nvar singleton = null;\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\n\nvar FixedOffsetZone = /*#__PURE__*/function (_Zone) {\n  _inherits(FixedOffsetZone, _Zone);\n\n  var _super = _createSuper(FixedOffsetZone);\n\n  function FixedOffsetZone(offset) {\n    var _this;\n\n    _classCallCheck(this, FixedOffsetZone);\n\n    _this = _super.call(this);\n    /** @private **/\n\n    _this.fixed = offset;\n    return _this;\n  }\n  /** @override **/\n\n\n  _createClass(FixedOffsetZone, [{\n    key: \"type\",\n    get: function get() {\n      return \"fixed\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.fixed === 0 ? \"UTC\" : \"UTC\".concat(_formatOffset(this.fixed, \"narrow\"));\n    }\n  }, {\n    key: \"ianaName\",\n    get: function get() {\n      if (this.fixed === 0) {\n        return \"Etc/UTC\";\n      } else {\n        return \"Etc/GMT\".concat(_formatOffset(-this.fixed, \"narrow\"));\n      }\n    }\n    /** @override **/\n\n  }, {\n    key: \"offsetName\",\n    value: function offsetName() {\n      return this.name;\n    }\n    /** @override **/\n\n  }, {\n    key: \"formatOffset\",\n    value: function formatOffset(ts, format) {\n      return _formatOffset(this.fixed, format);\n    }\n    /** @override **/\n\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      return true;\n    }\n    /** @override **/\n\n  }, {\n    key: \"offset\",\n    value: function offset() {\n      return this.fixed;\n    }\n    /** @override **/\n\n  }, {\n    key: \"equals\",\n    value: function equals(otherZone) {\n      return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n    }\n    /** @override **/\n\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }], [{\n    key: \"utcInstance\",\n    get:\n    /**\n     * Get a singleton instance of UTC\n     * @return {FixedOffsetZone}\n     */\n    function get() {\n      if (singleton === null) {\n        singleton = new FixedOffsetZone(0);\n      }\n\n      return singleton;\n    }\n    /**\n     * Get an instance with a specified offset\n     * @param {number} offset - The offset in minutes\n     * @return {FixedOffsetZone}\n     */\n\n  }, {\n    key: \"instance\",\n    value: function instance(offset) {\n      return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n    }\n    /**\n     * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n     * @param {string} s - The offset string to parse\n     * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n     * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n     * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n     * @return {FixedOffsetZone}\n     */\n\n  }, {\n    key: \"parseSpecifier\",\n    value: function parseSpecifier(s) {\n      if (s) {\n        var r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n\n        if (r) {\n          return new FixedOffsetZone(signedOffset(r[1], r[2]));\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return FixedOffsetZone;\n}(Zone);\n\nexport { FixedOffsetZone as default };","map":{"version":3,"names":["formatOffset","signedOffset","Zone","singleton","FixedOffsetZone","offset","fixed","name","ts","format","otherZone","type","utcInstance","s","r","match"],"sources":["/Users/andrewng/Desktop/react-app/react-app/node_modules/luxon/src/zones/fixedOffsetZone.js"],"sourcesContent":["import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /** @override **/\n  get type() {\n    return \"fixed\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  get ianaName() {\n    if (this.fixed === 0) {\n      return \"Etc/UTC\";\n    } else {\n      return `Etc/GMT${formatOffset(-this.fixed, \"narrow\")}`;\n    }\n  }\n\n  /** @override **/\n  offsetName() {\n    return this.name;\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return true;\n  }\n\n  /** @override **/\n  offset() {\n    return this.fixed;\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n"],"mappings":";;;;AAAA,SAASA,YAAY,IAAZA,aAAT,EAAuBC,YAAvB,QAA2C,iBAA3C;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,IAAIC,SAAS,GAAG,IAAhB;AAEA;AACA;AACA;AACA;;IACqBC,e;;;;;EAuCnB,yBAAYC,MAAZ,EAAoB;IAAA;;IAAA;;IAClB;IACA;;IACA,MAAKC,KAAL,GAAaD,MAAb;IAHkB;EAInB;EAED;;;;;SACA,eAAW;MACT,OAAO,OAAP;IACD;IAED;;;;SACA,eAAW;MACT,OAAO,KAAKC,KAAL,KAAe,CAAf,GAAmB,KAAnB,gBAAiCN,aAAY,CAAC,KAAKM,KAAN,EAAa,QAAb,CAA7C,CAAP;IACD;;;SAED,eAAe;MACb,IAAI,KAAKA,KAAL,KAAe,CAAnB,EAAsB;QACpB,OAAO,SAAP;MACD,CAFD,MAEO;QACL,wBAAiBN,aAAY,CAAC,CAAC,KAAKM,KAAP,EAAc,QAAd,CAA7B;MACD;IACF;IAED;;;;WACA,sBAAa;MACX,OAAO,KAAKC,IAAZ;IACD;IAED;;;;WACA,sBAAaC,EAAb,EAAiBC,MAAjB,EAAyB;MACvB,OAAOT,aAAY,CAAC,KAAKM,KAAN,EAAaG,MAAb,CAAnB;IACD;IAED;;;;SACA,eAAkB;MAChB,OAAO,IAAP;IACD;IAED;;;;WACA,kBAAS;MACP,OAAO,KAAKH,KAAZ;IACD;IAED;;;;WACA,gBAAOI,SAAP,EAAkB;MAChB,OAAOA,SAAS,CAACC,IAAV,KAAmB,OAAnB,IAA8BD,SAAS,CAACJ,KAAV,KAAoB,KAAKA,KAA9D;IACD;IAED;;;;SACA,eAAc;MACZ,OAAO,IAAP;IACD;;;;IA1FD;AACF;AACA;AACA;IACE,eAAyB;MACvB,IAAIH,SAAS,KAAK,IAAlB,EAAwB;QACtBA,SAAS,GAAG,IAAIC,eAAJ,CAAoB,CAApB,CAAZ;MACD;;MACD,OAAOD,SAAP;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,kBAAgBE,MAAhB,EAAwB;MACtB,OAAOA,MAAM,KAAK,CAAX,GAAeD,eAAe,CAACQ,WAA/B,GAA6C,IAAIR,eAAJ,CAAoBC,MAApB,CAApD;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,wBAAsBQ,CAAtB,EAAyB;MACvB,IAAIA,CAAJ,EAAO;QACL,IAAMC,CAAC,GAAGD,CAAC,CAACE,KAAF,CAAQ,uCAAR,CAAV;;QACA,IAAID,CAAJ,EAAO;UACL,OAAO,IAAIV,eAAJ,CAAoBH,YAAY,CAACa,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAAhC,CAAP;QACD;MACF;;MACD,OAAO,IAAP;IACD;;;;EArC0CZ,I;;SAAxBE,e"},"metadata":{},"sourceType":"module"}